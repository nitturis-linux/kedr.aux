# This module processes the calls to memory allocation and deallocation 
# functions and dumps stack trace for __kmalloc calls if the indicator
# triggers.

module.name = payload_dump_stack
module.author = Eugene
module.license = GPL

header =>>
#include <linux/kernel.h>   /* dump_stack() */
#include <linux/slab.h>     /* kmalloc() */
#include <linux/sched.h>    /* current, etc. */
<<
[group]
	# Name and return type of the target function
	function.name = __kmalloc
	returnType = void*

	# Names and types of the arguments of the target function
	arg.type = size_t
	arg.name = size

	arg.type = gfp_t
	arg.name = flags
	
	# The parameters to be output to the trace. 
	trace.param.type = size_t
	trace.param.name = size

	trace.param.type = unsigned int
	trace.param.name = flags

	trace.param.type = void*
	trace.param.name = returnValue

	# The format string to be used for trace output.
	trace.formatString = "arguments: (%zu, %x), result: %p"

	# Fault Simulation
	fpoint.param.type = size_t
	fpoint.param.name = size

	fpoint.param.type = gfp_t
	fpoint.param.name = flags

	fpoint.fault_code =>>
static int callNo = 0;
		
		/* just output a message and the call stack and go on normally */
		++callNo;
		printk(KERN_INFO "[__kmalloc()] Matched call, PID=%d, call #%d\n",
			(int)(current->pid),
			callNo
		);
		dump_stack();
		returnValue = __kmalloc(size, flags);
<<

# End of the group of definitions for __kmalloc().

#######################################################################
[group]
	# Name and return type of the target function
	function.name = krealloc
	returnType = void*

	# Names and types of the arguments of the target function
	arg.type = const void*
	arg.name = p

	arg.type = size_t
	arg.name = size

	arg.type = gfp_t
	arg.name = flags
	
	# The parameters to be output to the trace. 
	trace.param.type = const void*
	trace.param.name = p

	trace.param.type = size_t
	trace.param.name = size

	trace.param.type = unsigned int
	trace.param.name = flags

	trace.param.type = void*
	trace.param.name = returnValue

	# The format string to be used for trace output.
	trace.formatString = "arguments: (%p, %zu, %x), result: %p"
	
	# Fault Simulation
	#fpoint.reuse_point = __kmalloc

	fpoint.param.type = size_t
	fpoint.param.name = size

	fpoint.param.type = gfp_t
	fpoint.param.name = flags

	fpoint.fault_code =	returnValue = NULL;

# End of the group of definitions for krealloc().

#######################################################################
[group]
	# Name and return type of the target function
	function.name = kmem_cache_alloc
	returnType = void*

	# Names and types of the arguments of the target function
	arg.type = struct kmem_cache*
	arg.name = mc
	
	arg.type = gfp_t
	arg.name = flags
	
	prologue =>>
size_t size = kmem_cache_size(mc);
<<
	# The parameters to be output to the trace. 
	trace.param.type = void*
	trace.param.name = mc

	trace.param.type = unsigned int
	trace.param.name = flags

	trace.param.type = void*
	trace.param.name = returnValue

	# The format string to be used for trace output.
	trace.formatString = "arguments: (%p, %x), result: %p"

	# Fault Simulation
	#fpoint.reuse_point = __kmalloc

	# Duplicate parameters for kmalloc simulation point
	fpoint.param.type = size_t
	fpoint.param.name = size

	fpoint.param.type = gfp_t
	fpoint.param.name = flags

	fpoint.fault_code =	returnValue = NULL;

# End of the group of definitions for kmem_cache_alloc().

#######################################################################
[group]
	# Name and return type of the target function
	function.name = kmem_cache_alloc_notrace
	returnType = void*

	# Names and types of the arguments of the target function
	arg.type = struct kmem_cache*
	arg.name = mc
	
	arg.type = gfp_t
	arg.name = flags
	
	prologue =>>
size_t size = kmem_cache_size(mc);
<<
	# The parameters to be output to the trace. 
	trace.param.type = void*
	trace.param.name = mc

	trace.param.type = unsigned int
	trace.param.name = flags

	trace.param.type = void*
	trace.param.name = returnValue

	# The format string to be used for trace output.
	trace.formatString = "arguments: (%p, %x), result: %p"

	# Fault Simulation
	#fpoint.reuse_point = __kmalloc

	# Duplicate parameters for kmalloc simulation point
	fpoint.param.type = size_t
	fpoint.param.name = size

	fpoint.param.type = gfp_t
	fpoint.param.name = flags

	fpoint.fault_code =	returnValue = NULL;

# End of the group of definitions for kmem_cache_alloc_notrace().

#######################################################################
[group]
	# Name and return type of the target function
	function.name = kmem_cache_free

	# Names and types of the arguments of the target function
	arg.type = struct kmem_cache*
	arg.name = mc
	
	arg.type = void*
	arg.name = p
	
	# The parameters to be output to the trace. 
	trace.param.type = void*
	trace.param.name = mc
	
	trace.param.type = void*
	trace.param.name = p

	# The format string to be used for trace output.
	trace.formatString = "arguments: (%p, %p)"

# End of the group of definitions for kmem_cache_free().
#######################################################################
[group]
	# Name and return type of the target function
	function.name = kfree

	# Names and types of the arguments of the target function
	arg.type = void*
	arg.name = p
	
	# The parameters to be output to the trace. 
	trace.param.type = void*
	trace.param.name = p

	# Happens-before relationship with kmalloc
	trace.happensBefore = yes

	# The format string to be used for trace output.
	trace.formatString = "arguments: (%p)"

# End of the group of definitions for kfree().

#######################################################################
