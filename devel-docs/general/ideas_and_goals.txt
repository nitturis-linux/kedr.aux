Общая стратегическая задача
---------------------------

Создание системы для сертификации драйверов для Linux (возможно, чем-то 
напоминающей подобную систему для MS Windows - Windows Logo Kit).

Система сертификации, вероятно, будет использовать различные средства для 
анализа драйверов. В частности, система должна включать в себя средства 
анализа корректности и надёжности (operational reliability) работы 
собственно драйвера и, возможно, вспомогательных компонентов: средств для 
установки и удаления драйвера и пр.
=======================================================================

Общая тактическая задача
------------------------

Разработка набора средств анализа корректности и надёжности работы драйвера 
(ниже, для краткости, - reliability).

Очень желательно, чтобы эти средства были пригодны не только для 
использования в системе сертификации драйверов, но и были полезны и удобны 
в использовании для разработчиков драйверов.

Средства статического анализа исходного кода могут быть использованы для 
выявления различных классов проблем в драйверах. Тем не менее, далеко не 
для всех. 

На практике (читать: в MS Windows) основная работа при сертификации 
драйверов выполняется cредствами для анализа драйверов в runtime. Эти 
средства и системы статического анализа друг друга неплохо дополняют на 
данный момент. При разработке драйверов Microsoft рекомендует использовать 
инструменты обоих типов.
=======================================================================

Тактическая задача и центральные идеи проекта
---------------------------------------------

Необходимо разработать платформу (набор программных средств) для построения 
различных средств runtime-анализа драйверов, в частности, для построения в 
дальнейшем наборов автоматизированных тестов корректности и надёжности 
работы драйверов.

[1]
Платформа должна дать возможность как приложениям пользовательского режима, 
так и модулям режима ядра анализировать поведение выбранного драйвера (или 
драйверов). При этом влияние сбора информации о работе данного драйвера на 
остальной код ядра Linux должно быть, по возможности, минимальным. Сбор 
таких данных и предоставление их в удобной для анализа форме - одна из 
основных задач платформы (см. для сравнения описание Driver Verifier для 
Windows). 

[2]
Платформа должна дать возможность автоматически проверять определённые 
базовые требования к драйверам в runtime: отсутствие определённых типов 
ошибок доступа к памяти и др. - см. для сравнения описание Driver Verifier 
для Windows. Список таких автоматически проверяемых требований может 
расширяться по мере развития данной платформы.

[3]
Программные средства данной платформы должны быть удобны для использования 
разработчиками драйверов. Эти средства должны дать возможность 
автоматизировать, как минимум, основные рутинные операции, 
необходимые для проверки reliability драйверов.

[NB] От разработчиков драйверов нельзя требовать досконально разбираться, 
как работают программные средства данной платформы.

На данный момент (03.03.2010) неизвестны средства для runtime анализа 
драйверов, удовлетворяющие условиям [1], [2] и [3] одновременно.

Есть средства для "общесистемного" анализа (SystemTap, LTTng, kmemcheck, 
спец. настройки в ядре и др.), есть средства для облегчения ручного 
анализа (Crash, kgdb, и др.) и так далее. 

Средства же для автоматизированного анализа поведения выбранного 
пользователем драйвера (с минимальным влиянием на остальные компоненты 
ядра) отсутствуют.

Предлагаемая платформа могла бы восполнить этот пробел.

[NB] Платформа, удовлетворяющая указанным выше условиям, могла бы стать 
полезной и при разработке автоматизированных тестов, проверяющих требования 
к драйверам для того или иного конкретного класса устройств. Такие тесты, в 
частности, являются важным компонентом системы сертификации драйверов (см. 
для сравнения Windows Logo Kit).
