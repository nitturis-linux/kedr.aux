Структура репозиториев для проекта KEDR
---------------------------------------

На BerliOS Developer создан проект "KEDR":
https://developer.berlios.de/projects/kedr/

Основной репозиторий для системы KEDR размещён в этом проекте на BerliOS 
Developer.

Release делаются именно из него. 

=======================================================================

Репозиторий на BerliOS Developer
--------------------------------

На чтение есть доступ у всех, например, след. операция допустима:
hg clone http://hg.berlios.de/repos/kedr <имя_каталога>
Эта команда создаст в указанном каталоге копию репозитория.

На запись есть доступ только у участников проекта и только по HTTPS. Если 
нужна копия репозитория, то стоит выполнить такую команду:
hg clone https://loginname@hg.berlios.de/repos/kedr <имя_каталога>

'loginname' - login участника проекта KEDR на BerliOS Developer.

Push выполняется аналогично:
hg push https://loginname@hg.berlios.de/repos/kedr
При выполнении этой команды потребуется ввести пароль соотв. пользователя 
BerliOS Developer.

Если кому-то из "внешних" разработчиков хочется внести свои изменения в 
систему, пусть присылают патчи основным разработчика проекта.

После выпуска очередной версии системы нужно создавать branch для поддержки 
этой версии (bug fixes и пр.).
=======================================================================

Репозиторий на Itgdev
---------------------

На данный момент "промежуточный" репозиторий для KEDR организованы на 
сервере Itgdev. 

При ночных сборках и запусках, как правило, исходные файлы KEDR загружаются 
отсюда.

Maintainer репозитория на BerliOS Developer время от времени push'ит 
изменения из репозитория на Itgdev в репозиторий на BerliOS Developer. 

Когда разработчик системы KEDR завершает работу над очередным блоком 
системы, сделанные изменения нужно отправить (push) в репозиторий на 
Itgdev, чтобы при ночных запусках всё было проверено хоть как-то.

[!!!] Только maintainer репозитория на BerliOS Developer имеет право 
вносить туда изменения. Остальные разработчики системы KEDR отправляют 
сделанные ими изменения только в репозиторий на Itgdev.

Для доступа извне к репозиторию на Itgdev (в т.ч. для clone и для работы 
через web-интерфейс) 
необходимо использовать след. базовый URL:
https://itgdev.igroup.ispras.ru/hgwebdir.cgi/kedr/

Пример. Создание копии репозитория для очередной 0.x-версии системы:
    hg clone https://itgdev.igroup.ispras.ru/hgwebdir.cgi/kedr/kedr-0.x/current/ kedr-current

Копия будет создана в подкаталоге kedr-current текущего каталога на 
локальной машине.

Для доступа изнутри (т.е. на самом сервере Itgdev) стоит использовать след. 
путь к репозиториям:
d:\hg_repo\kedr\
=======================================================================

Разработчику системы KEDR м.б. полезно иметь, как минимум, два репозитория: 
- "эталонный" ("pristine") репозиторий - это копия репозитория с Itgdev;
- "рабочий" ("working copy") репозиторий, в котором и осуществляется 
основная разработка - создаётся вначале как копия эталонного. 

В эталонном репозитории стоит время от времени делать pull, чтобы он был 
синхронизирован с репозиторием на Itgdev. Если эталонный репозиторий есть, 
проще разобраться, как merge свои изменения в основной репозиторий и при 
этом не испортить ничего.

Т.е. процесс примерно таков:

1. Создаём эталонный репозиторий в каталоге, скажем, kedr-pristine:
hg clone https://itgdev.igroup.ispras.ru/hgwebdir.cgi/kedr/kedr-0.x/current/  kedr-pristine

2. Делаем working copy в каталоге, скажем, kedr-work:
hg clone <путь_к_kedr-pristine> kedr-work

3. Работаем с working copy, вносим изменения, делаем commit'ы, проверяем 
всё у себя и пр. Когда станет понятно, что пора эти все наработки и при 
ночных запусках проверять, переходим к след. шагу.

[NB] Сообщения при commit в репозитории KEDR стоит писать по-английски: они 
в итоге, скорее всего, окажутся в основном репозитории на BerliOS, откуда 
будут видны всему миру.

4. Делаем pull в kedr-pristine, чтобы "подтянуть" туда с Itgdev изменения, 
сделанные другими разработчиками за это время. 

5. Делаем merge (если надо) и push из working copy в kedr-pristine.

6. Если предыдущий шаг прошёл успешно, делаем merge (если надо) и push из 
kedr-pristine в репозиторий на Itgdev.

7. Если на шаге 5 выявились проблемы - разбираемся с ними. Что важно, при 
этом репозиторий на Itgdev испорчен не был, т.к. всё делалось локально.

Подробнее о таких типах workflow - в документации по Mercurial:
http://hgbook.red-bean.com/read/
http://www.selenic.com/mercurial/wiki/
=======================================================================

Репозиторий для вспомогательных файлов (на Itgdev)
--------------------------------------------------

Примеры кода, документацию для разработчиков (не для пользователей), 
скрипты для ночных запусков и пр. удобно тоже хранить в репозитории - чтобы 
не потерялось, и чтобы разработчикам проще было это всё находить. 

Чтобы не захламлять репозитории KEDR, всё это нужно хранить не там, а в 
специальном репозитории kedr-aux на Itgdev:

https://itgdev.igroup.ispras.ru/hgwebdir.cgi/kedr/kedr-aux/

Этот репозиторий не публикуется на BerliOS и т.п., он доступен только в 
ИСП. Соотв., commit messages для файлов из этого репозитория можно писать и 
по-русски.

Примеры для демонстрации приёмов, технологий и т.д. стоит размещать в 
разделе snippets, документацию - в devel-docs.

Жёстких ограничений на структуру репозитория kedr-aux нет, можно создавать 
новые разделы и пр.
=======================================================================

Примечания
----------

В файлах .readme в разделах (подкаталогах) devel-docs, и т.д. каждого 
репозитория - более подробная информация о назначении соотв. раздела и о 
том, что и как в нём должно храниться.
=======================================================================

Разное
------

При копировании репозитория на Itgdev (внутри) стоит проверить содержимое 
файла .hg/hgrc в нём. Там стоит, как минимум, указать имя и email 
maintainer'а этого репозитория. Иногда может потребоваться и разрешить push 
в этот репозиторий для внешних пользователей (по умолчанию это запрещено.)

Пример файла .hg/hgrc:

######################################################
# Settings for this particular Mercurial repository

[web]
# Describe the repository and specify who maintains it
description = KEDR system v.0.10
contact = Maintainer's Name <some_address@ispras.ru>

# Uncomment to allow everyone to push to this repository
# allow_push = *

# Enable snapshot downloads
allow_archive = bz2 zip
######################################################
=======================================================================
