1. SystemTap предназначен для глобальной работы с ядром и включенными в него модулями. KEDR работает с одним конкретным модулем, возможно внешним по отношению к ядру (не включен в стандартную поставку ядра).

2. SystemTap предназначен только для сбора информации в точках перехвата управления, но делает это эффективно. KEDR хорошо работает и в случае необходимости изменить поведение модуля.

3. SystemTap работает только с модулями, для которых есть отладочная информация. KEDR'у эта информация не нужна.

4. SystemTap позволяет перехватывать управление не только у функций, но и других объектов - tracepoints, markesrs, syscalls, vfs. KEDR поддерживает перехват управления только для вызовов функций.

5. SystemTap позволяет управлять сбором информации через высокоуровневые скрипты(но и допускается писать на C коде). KEDR работает на уровне C-кода.

Выводы: 

1)Области применения практически не пересекаются(1,2) - как таковой, конкуренции нет
2)Конфликтов при одновременном применении возникать не должно.
3)Но и от интеграци толку немного - все, что может сделать SystemTap с помощью KEDR'а он может сделать эффективно и без этой помощи. В принципе, верно и обратное, за исключением высокоуровневых скриптов от SystemTap.

4)можно перенять у SystemTap такие возможности, как компиляция дополнительных модулей+запуск одной командой, некоторые возможности скриптов по сбору информации.

5)Возможна интеграция, при которой мы передаем всю функциональность по call monitoring'у SystemTap'у. Это можно сделать с помощью экспорта debuginfo информации о payload'ах. С другой стороны, такой подход ограничит легкость использования свеженаписанных payload'ов - чтобы использовать такой payload с SystemTap, необходимо экспортить его debuginfo, а это накладывает кучу ограничений по соглашениям(где должен быть модуль, как скомпилен, и прочее).