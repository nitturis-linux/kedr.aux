# It may be other file with prototypes of intercepted functions
# Note, that we use anchors for prototypes bodies for futher references.
proto: &kfree
    name: kfree
    arg: {type: void*, name: p}

proto: &__kmalloc
    name: __kmalloc
    arg:
      - { type: size_t, name: size}
      - { type: gfp_t, name: flags}
    returnType: void*

proto: &krealloc
    name: krealloc
    arg:
      - {type: void*, name: pointer}
      - {type: size_t, name: size}
      - {type: gfp_t, name: flags}
    returnType: void*

# Data file for concrete payload.
# It may not be different YAML document (delimited with '---')
# because otherwise anchors for prototypes will lost.

module:
    name: kedr_lc_common_mm
    author: Eugene A. Shatokhin

header: |
    #define KEDR_RCU_ADDRESS_LIMIT    4096

function:
# We cannot just 'insert' some keys from anchored prototypes and then
# add other keys, which describe handlers.
# We only can place anchored prototype and other key into different
# YAML sequence elements, but in that case them will be interpreted as
# subparameters for _different_ function objects.

# So we place prototype in well-known subparameter.
# This slightly complicates templates.

  - proto: *kfree

    # The body of the replacement function.
    handler_pre : |
        if (!ZERO_OR_NULL_PTR(p)) 
            kedr_lc_handle_free(target_module, p, caller_address);

  - proto: *__kmalloc
    # For example, rename handler name (intercepted function remains!).
    name: __kmalloc_special
    
    handler_post : |
        if (!ZERO_OR_NULL_PTR(ret_val))
            kedr_lc_handle_alloc(target_module, ret_val, size, caller_address);

  - proto: *krealloc
    # For example, redefined arguments for rename some of them.
    # (Rename 'pointer' to 'p').
    arg:
      - {type: void*, name: p}
      - {type: size_t, name: size}
      - {type: gfp_t, name: flags}

    # Doesn't need to also define 'returnType' - it will be taken from
    # prototype.

    # The body of the replacement function
    handler_pre: |
        if (size == 0 || !ZERO_OR_NULL_PTR(p)) {
            /* kfree */
            if (!ZERO_OR_NULL_PTR(p)) 
                kedr_lc_handle_free(target_module, p, caller_address);

                /* [NB] If size != 0 and p != NULL and later the allocation fails, we will
                 * need to add a fake allocation event for 'p' to the storage because 'p'
                 * is not actually freed by krealloc() in this case. */
        }

    handler_post: |
        if (size != 0) {
            if (p == NULL) { 
                /* kmalloc */
                if (ret_val != NULL)
                    kedr_lc_handle_alloc(target_module, ret_val,
                        size, caller_address);
            } else {
                /* kfree + kmalloc if everything succeeds */
                kedr_lc_handle_alloc(target_module, 
                    ((ret_val != NULL) ? ret_val : p), 
                    size, caller_address);

                /* If the allocation failed, we return information about 'p'
                 * to the storage. A minor issue is that stack trace will 
                 * now point to this call to krealloc rather than to the call 
                 * when 'p' was allocated. Should not be much of a problem. */
            }
        }
# For example, function without parameters, and without prototype.
function:
    name: rcu_read_lock
    
    handler_post: |
        /* Do nothing */
        {}