Список того, чего еще нет, но можно реализовать.

1. 'i', 'i0' - реализовано
2. Игнорирование перевода строки, если он следует сразу за директивой.

Полезно для удобочитаемости шаблона.

<$if block1$>
<$block1$>
<$endif$>
<$if block2$>
<$block2$>
<$endif$>

С параметрами 

<root>:
  - block1: "%block1%"
  - block2: "%block2%"

Раскроется в

%block1%
%block2%

Без этой особенности, шаблон пришлось бы (и приходится) писать так:

<$if block1$><$block1$>
<$endif$><$if block2$><$block2$>
<$endif$>

3. Функция join_unique

Тоже, что и 'join', но не пишет строковое представление аргумента, если
точно такое же значение было написано в предыдущей итерации.

"a" "b" "b" "a" "b" "c" "b" "b" : join(=) =>
"a=b=b=a=b=c=b=b"

"a" "b" "b" "a" "b" "c" "b" "b" : join_unique(=) =>
"a=b=c"

Нарушает независимость генерации по шаблону от значений параметров
(без этой функции генератор отличал только пустые значения, что
является минимумом для условной генерации).

Но реализуется несложно.

4. Функция 'indent' не делает отступа в первой строке аргумента.

Из шаблона

void f(void)
{
    <$code: indent "    "$>
}

лучше видно конечное представление кода, чем из

void f(void)
{
<$code: indent "    "$>
}

Или ввести функцию 'indented', которая автоматически определяет отступ
начала текущего шаблона, и добавляет такой же отступ для всех остальных
строк шаблона:

void f(void)
{
    <$code: indented$>
}

Но в этом случае получается зависимость шаблона от предыдущих, и это надо
точнее формализовать.