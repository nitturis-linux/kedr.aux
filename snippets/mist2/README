Утилита для генерации текста на основе шаблонов mist2 и параметров,
записанных в файл в формате YAML.

        Синтаксис

mist-yaml <templates-directory> <data-file>


        Шаблоны
[
    Сравнение с kedr_gen: почти полная аналогия. Только вместо двух
    директорий с шаблонами используется одна.
]
Кодирование шаблонов ведется полностью по принципам движка mist2
(см. src/mist2/README).

Шаблонам соответствуют файлы с именем <templateName>.tpl, находящиеся в
заданной директории.

Главный шаблон называется "document".


        Параметры

Параметры задаются в YAML формате (http://www.yaml.org/spec/1.2/spec.html).

Для конвертации их в формат, с которым работает mist2, используются
следующие правила:

1. YAML map соответствует кусту параметров, ключи(keys) становятся
именами подкустов.

YAML         ->          ParamSet

                    <root>:
name:                 - name:
  subname1: value1      - subname1("value1")
  subname2: value2      - subname2("value2")



2. Если значение(value) для YAML map - скаляр, то он становится значением
соответствующего подпараметра.

YAML         ->          ParamSet

                    <root>:
name1: value1         - name1("value1")
name2: value2         - name2("value2")


3. Если значение(value) для YAML map - NULL, то значение
соответствующего подпараметра - пустая строка.

YAML         ->          ParamSet

                    <root>:
name1:                - name1("")
name2: value2         - name2("value2")



4. Если значение(value) для YAML map - последовательность(sequence),
то для каждого элемента последовательности создается новый подпараметр
с именем, соответствующим ключу.

YAML         ->          ParamSet

                    <root>:
name: [a, b, c]       - name("a")
                      - name("b")
                      - name("c")

YAML         ->          ParamSet

                    <root>:
name:                 - name:
  - subname: a          - subname("a")
    subname1: b         - subname1("b")
                      - name:
  - subname: c          - subname("c")
    subname1: d         - subname1("d")

5. В качестве ключей разрешены только скаляры. Использование map,
sequence, и NULL - запрещено:

: a # Invalid

[a,b]: c # Invalid

{a:1,b:2}: c # Invalid

6. На уровне YAML документа разрешена только map:

a # Invalid

- a: 1 # Invalid
- b: 2 # Invalid


        Модификация YAML

Хотя спецификация YAML это запрещает (3.2.2.1 Nodes,
http://www.yaml.org/spec/1.2/spec.html#id2764044), в data-файле
допустимо использовать одинаковые ключи в map.

Это сделано для того, чтобы можно было "склеивать" data-файл из кусочков,
каждый из которых является полноценным YAML файлом.

NOTE: При интерпритации ключей с одинаковым именем в map порядок
параметров, соответствующих этим ключам, может отличаться от порядка
ключей в документе:

YAML         ->          ParamSet(возможный вариант)

                    <root>:
name: value1          - name("value2")
name: value2          - name("value1")

Если порядок параметров важен, необходимо использовать последовательность.


Другой вариант склейки, не нарушающий спецификации YAML - использование
последовательности(sequence). Но в таком случае кусочки должны
использовать одинаковый отступ для элементов последовательности, то есть
уже не могут быть совсем независимыми.


        Стандартные Конструкции YAML для использования в data-файле

1. Параметр-значение

name: value

2. Параметр-подпараметры со значениями

name:
  subname1: value1
  subname2: value2

3. Параметр-подпараметры со значениями(компактный вариант)

name: {subname1: value1, subname2: value2}

4. Несколько параметров с одинаковыми именами

name:
  - subname1: value1
    subname2: value2
  - subname1: value3
    subname2: value4

Эквивалентно(но с нарушением спецификации YAML, и, возможно, порядка)

name:
    subname1: value1
    subname2: value2
name:
    subname1: value3
    subname2: value4


5. Несколько параметров с одинаковыми именами(компактный вариант)

name:
  - {subname1: value1, subname2: value2}
  - {subname1: value3, subname2: value4}

6. Несколько параметров с одинаковыми именами, имеющих только значение

name: [value1, value2]

Эквивалентно

name: value1
name: value2

7. Многострочное значение параметра

long_param: |
  abc de
  fj

next_param: ...

Здесь значение параметра long_param состоит из двух строк:

>>
abc de
fj
<<

7. Многострочное значение параметра c отступами

indented_param: |
  abc de
   fj
  fg
     hr

next_param: ...

Здесь значение параметра long_param состоит из четырех строк:

>>
abc de
 fj
fg
   hr
<<

NOTE: Нет простого способа задать отступ в первой строке параметра.
Отступ ко всем строкам параметра может быть добавлен в шаблоне с помощью
функции indent.

param: |
  if(a > 0)
    a--;
  else
    a++;


<$param: indent "    "$>

Результат конструкции:

>>
    if(a > 0)
      a--;
    else
      a++;
<<