Пример для демонстрации перехвата (подмены) вызовов функций в данном модуле 
ядра в runtime. Работает только на x86 и x86_64.
=======================================================================

Анализируется модуль 'cr_target' (основа - всё тот же сильно упрощённый 
'scull' из LDD Book). 

Момент его загрузки отлавливается модулем 'cr_watcher'. Последний проходит 
по коду модуля cr_target в памяти и инструментирует вызовы след функций:

- __kmalloc
- kfree
- kmem_cache_alloc
- kmem_cache_free
- copy_from_user
- copy_to_user

Вызовы заменяются прямо в памяти на вызовы соотв. replacement-функций, 
каждая из которых просто выводят в лог сообщение о том, что функция была 
вызвана с такими-то параметрами и выдала такой-то результат.

Эти replacement-функции определены в том же модуле cr_watcher (в production 
системе они, вероятно, были бы в отдельном модуле, но здесь просто пример, 
а не production-quality система).

Если вдруг cr_watcher будет выгружен раньше, чем cr_targer, cr_watcher 
вернёт все изменённые вызовы в cr_target в исходное состояние.
=======================================================================

Пример работы с модулями из call_repl (as root):

0. cd ./cr_target/
1. /sbin/insmod ../cr_watcher/cr_watcher.ko
2. ./cr_target_load.sh

См. в /var/log/messages:
------------------
[cr_watcher] Initializing
[cr_watcher] Module 'cr_target' has just loaded.
[cr_watcher] Module "cr_target", processing "init" area
[cr_watcher] At 0xe15fd0bc: changing address 0xc030dc60 to 0xe15ee060 (displ: 0xded10b9f to 0xffff0f9f)
[cr_watcher] Module "cr_target", processing "core" area
[cr_watcher] At 0xe15f91be: changing address 0xc030e9b0 to 0xe15ee0c0 (displ: 0xded157ed to 0xffff4efd)
[cr_watcher] At 0xe15f91ec: changing address 0xc030e9b0 to 0xe15ee0c0 (displ: 0xded157bf to 0xffff4ecf)
[cr_watcher] At 0xe15f92d0: changing address 0xc030dc60 to 0xe15ee060 (displ: 0xded1498b to 0xffff4d8b)
[cr_watcher] At 0xe15f9637: changing address 0xc042b850 to 0xe15ee170 (displ: 0xdee32214 to 0xffff4b34)
[cr_watcher] At 0xe15f9777: changing address 0xc042b9a0 to 0xe15ee1e0 (displ: 0xdee32224 to 0xffff4a64)
[cr_target] Initializing
[cr_watcher] Called: __kmalloc(184, d0), result: c7858300
------------------

3. echo "zxcvbnmjhgfdsda" > /dev/cfake0

См. в /var/log/messages:
------------------
[cr_target] open() for MJ=251 and MN=0
[cr_watcher] Called: __kmalloc(4000, d0), result: dd5c3000
[cr_target] write() for MJ=251 and MN=0
[cr_watcher] Called: copy_from_user(dd5c3000, b74f0000, 16), result: 0
[cr_target] release() for MJ=251 and MN=0
------------------

4. dd if=/dev/cfake0 ibs=100 count=1

См. в /var/log/messages:
------------------
[cr_target] read() for MJ=251 and MN=0
[cr_watcher] Called: copy_to_user(0805a000, dd5c3000, 100), result: 0
[cr_target] release() for MJ=251 and MN=0
------------------

5. ./cr_target_unload.sh

См. в /var/log/messages:
------------------
[cr_target] Cleaning up
[cr_watcher] Called: kfree(dd5c3000)
[cr_watcher] Called: kfree((null))
[cr_watcher] Called: kfree(c7858300)
[cr_watcher] Module 'cr_target' is going to unload.
------------------

[NB] Стоит отметить, что перехватывались в т.ч. и вызовы из init- и 
cleanup-функций модуля cr_target.

Если попытаться выгрузить модуль cr_watcher до выгрузки cr_target, в 
/var/log/messages будет следующее:
------------------
[cr_watcher] Detector stops watching for module 'cr_target'.
[cr_watcher] Module "cr_target", restoring "core" area
[cr_watcher] At 0xe26e31be: changing address 0xe15ee0c0 to 0xc030e9b0 (displ: 0xfef0aefd to 0xddc2b7ed)
[cr_watcher] At 0xe26e31ec: changing address 0xe15ee0c0 to 0xc030e9b0 (displ: 0xfef0aecf to 0xddc2b7bf)
[cr_watcher] At 0xe26e32d0: changing address 0xe15ee060 to 0xc030dc60 (displ: 0xfef0ad8b to 0xddc2a98b)
[cr_watcher] At 0xe26e3637: changing address 0xe15ee170 to 0xc042b850 (displ: 0xfef0ab34 to 0xddd48214)
[cr_watcher] At 0xe26e3777: changing address 0xe15ee1e0 to 0xc042b9a0 (displ: 0xfef0aa64 to 0xddd48224)
[cr_watcher] Cleanup successful
------------------

После этого можно попробовать, например, операции (3) и (4) - см. выше - и 
убедиться, что модуль cr_target работает, но перехвата вызовов, понятное 
дело уже нет.
=======================================================================

Пример call_repl проверялся на след. системах (в скобках - версии ядра):

1. OpenSUSE 11.2 x86 (2.6.31.x) - OK 
2. SLES 11 x86_64 (2.6.27.x) - OK
3. Fedora 12 x86_64 - OK
4. Ubuntu 10.04 beta 1 x86 (2.6.32.x) - OK
5. Debian 5 x86_64 (2.6.26.x) - OK
6. Mandriva Cooker (2010) x86 (2.6.31.12) - OK
=======================================================================
