# This module processes the calls to kmalloc-like functions.
module:
    name: kmalloc
    author: Tsyvarev
    license: GPL

headers:
  - |
    /* ========================================================================
     * Copyright (C) 2012, KEDR development team
     * Copyright (C) 2010-2012, Institute for System Programming 
     *                          of the Russian Academy of Sciences (ISPRAS)
     * Authors: 
     *      Eugene A. Shatokhin <spectre@ispras.ru>
     *      Andrey V. Tsyvarev  <tsyvarev@ispras.ru>
     *
     * This program is free software; you can redistribute it and/or modify it
     * under the terms of the GNU General Public License version 2 as published
     * by the Free Software Foundation.
     ======================================================================== */

    #include <linux/slab.h>
    #include <linux/gfp.h>

functions:
  - name: __kmalloc
    returnType: void*

    args:
      - {type: size_t, name: size}
      - {type: gfp_t, name: flags}

    # Fault Simulation
    fpoint:
        params:
          - {type: size_t, name: size}
          - {type: gfp_t, name: flags}

        rename: kmalloc

        fault_code: ret_val = NULL;
# End of the group of definitions for __kmalloc().
#######################################################################
  - name: kmem_cache_alloc
    returnType: void *

    args:
      - {type: struct kmem_cache *, name: mc}
      - {type: gfp_t, name: flags}

    prologue: |
        size_t size = kmem_cache_size(mc);

    # Fault Simulation
    fpoint:
        reuse_point: kmalloc

        # Duplicate parameters for kmalloc simulation point
        params:
          - {type: size_t, name: size}
          - {type: gfp_t, name: flags}

        fault_code:    ret_val = NULL;
# End of the group of definitions for __kmalloc().
#######################################################################

---
headers:
  - |
    #include <stdarg.h>
    #include <linux/kernel.h>

functions:
  - name: kasprintf
    returnType: char*
    
    args:
      - {type: gfp_t, name: gfp}
      - {type: const char*, name: fmt}
    
    ellipsis: true
    last_arg: fmt
    original_code: |
        //Use kvasprintf function
        ret_val = kvasprintf(gfp, fmt, args);
    
    # Fault Simulation
    fpoint:
        params:
          - {type: gfp_t, name: flags}

        fault_code: ret_val = NULL;

        
# End of the group of definitions for kasprintf().
#######################################################################
    # Name and return type of the target function
  - name: kvasprintf
    returnType: char *

    # Names and types of the arguments of the target function
    args:
      - {type: gfp_t, name: gfp}
      - {type: const char*, name: fmt}
      - {type: va_list, name: ap}

    # Copiing process of the parameter of 'va_list' type
    args_copy_declare_and_init: |
        gfp_t gfp_copy = gfp;
        const char* fmt_copy = fmt;
        va_list ap_copy;
        va_copy(ap_copy, ap);
    args_copy_destroy: va_end(ap_copy);

    # Fault Simulation
    fpoint:
        params:
          - {type: gfp_t, name: flags}

        fault_code: ret_val = NULL;
# End of the group of definitions for kvasprintf().
#######################################################################
