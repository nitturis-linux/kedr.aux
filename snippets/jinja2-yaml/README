Генератор текста, использующий язык шаблонов Jinja2 и данные в формате YAML.


                    Использование

% python bin/jinja2-yaml <yaml-document> <templates-dir> [<temlate-name>]

где:

<yaml-document> - файл, содержащий YAML document(синтаксис: http://yaml.org/spec/1.1/)

<templates-dir> - директория, содержащая файлы шаблонов Jinja(синтаксис: http://jinja.pocoo.org/docs/).
Шаблону с именем '%name%' должен соответствовать файл '%name%.tpl' в
данной директории.

<temlate-name> - имя шаблона, используемого для инстанциации данных.
Если не указано, то используется 'document'.


Шаблон инстанциируется с переменными, соответствующими переменным
верхнего уровня YAML документа. Результат инстанциации выводится в stdout.


            Объединение данных из нескольких YAML документов

Входной файл <yaml-document> может содержать несколько YAML документов
(разделенных строкой '---'). В этом случае данные для инстанциации
шаблона определяются следующим образом.

Если некоторое имя используется в качестве имени переменной верхнего
уровня ровно в одном YAML документе, то при инстанциации шаблона
используется переменная с этим именем и содержимым идентичным содержимому
переменной в этом документе.
Если некоторое имя используется в качестве имени переменной верхнего
уровня в двух или более YAML документах, то:
1) Во всех документах тип переменной должен быть YAML Sequence
(этот тип транслируется в тип Python 'list' при загрузке документов)
2) При инстанциации шаблона используется переменная с этим именем и
значением равным объединению значений переменных с этим именем из всех
документов:

values:
  - val1
  - val2
---
values:
  - val3
  
эквивалентно

values:
  - val1
  - val2
  - val3  


                    Настройки синтаксиса шаблонов
                (отличные от настроек по-умолчанию в Jinja2)

<$ ... $> - блок
<# ... #> - комментарий

Символ новой строки, следующий сразу после блока(комментария) удаляется
(trim_blocks=True).


                    Особенности Jinja2-2.6

Документация на сайте http://jinja.pocoo.org/docs/ описывает Jinja2-2.8.
Но некоторые возможности версии 2.8 не поддерживаются в версии 2.6.
Неполный список таких возможностей перечислен ниже
(NOTE: Не все эти возможности в документации отмечены как 2.7+ или 2.8+)

1. Параметр lstrip_blocks конструктора класс jinja2.Environment не
поддерживается в 2.6. В то время как конструкция <$- ...$>, эквивалентная
lstrip_blocks=True, поддерживается.

2. Конструкции <$+ ... $>, <$ ... +$> не поддерживаются в 2.6.
(иными словами, отбрасывание символа новой строки после блока отменить
нельзя). Но конструкция <$ ... -$> поддерживается (NOTE: эта конструкция
не эквивалентна trim_blocks=True, так как отбрасывает все пробельные
символы после блока, а не только символ новой строки).

3. Параметр keep_trailing_newline конструктора класс jinja2.Environment
не поддерживается в 2.6. Иными словами, заключительный символ новой
строки после рендеринга шаблона(!!) всегда отбрасывается.


            Конструкции Jinja2 для генерации кода на языке C/C++

Список конструкций и приемов, полезных при генерации кода на языках
программирования C/C++
NOTE: Список не полный, будет обновляться.

1. Условное включение однострочного или многострочного кода, без лишних
символов новой строки перед и после него:

<$if ...$>
..code..
<$endif$>

Если код должен иметь отступ, то он пишется с этим отступом, но сами
блоки <$if$> и <$endif$> должны писаться без отступа:

<$if ...$>
    line1
    line2
    ...
<$endif$>

2. Условное включение части строки, без добавления символов новой строки
перед и после нее:

<$if ...$>..substr..<$endif$>

Если получается слишком длинная строка шаблона, то можно записать так:
<$if ...-$>
..substr..
<$-endif$>

3. Блок кода, включающий многострочные ссылки на переменные или шаблоны:

    {
<$filter indent(8, True)$>
<$include 't1'$>
{{v2}}
...
<$enfilter$>

    }

При этом содержимое включамых шаблонов и переменных должно писаться без
отступов (в YAML содержимое переменных с отступом пишется гораздо
сложнее, чем без него).

Пустая строка после <$endfilter$> важна, иначе закрывающая скобка
'}' будет выведена в одной строке вместе с последней строкой блока кода.

4. Join значений переменных выполняется с помощью фильтра Jinja2 join().
Но при join'е значений шаблона или других сложных строк приходится
использовать итерирование 'for' и переменные loop.first/loop.last:

<$for arg in args$>
{{arg.name}} {{arg.value}}<$if not loop.last$>, <$endif$>
<$endfor$>