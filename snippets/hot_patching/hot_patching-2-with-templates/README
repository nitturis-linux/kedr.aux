Модифицированный пример "hot_patching-2". 
replacement функции генерируются на основе data-файлов call monitor payloads из KEDR.

Для упрощения реализации, пример использует source и binary tree из KEDR.
Первое нужно для заголовочного файла <kedr/base/common.h>, второе - для генератора и, возможно, как источника data-файлов.

Все настраиваемые опции находятся в файле common_makefile (формат - как у обычного makefile'а):

kedr_source_dir - путь к исходному дереву KEDR.
kedr_build_dir - путь к бинарному дереву KEDR (должно быть предсобрано вызовом 'make').
payload_data_files - список data-файлов, по которым будут определятся payload'ы, включаемые в целевой модуль.
Относительные имена файлов считаются относительно текущей директории.

module_name - определяет имя целевого модуля.

Payload data files не должны содержать в <$header$> секциях объявления одноименных переменных и функций
(одинаковые заголовочные файлы не запрещаются).

Для разработчика:

Реализация использует исходный код от "hot_patching-2" и шаблоны для call monitors payloads из KEDR, незначительно модифицируя их.

Для обновления "hot_patching-2" функциональности на основе обновленного "hot_patching-2" модуля:
	-на основе diff отредактировать patcher.c файл.

Для обновления функциональности call monitor payloads на основе обновленных исходных шаблонов:
	-из исходного templates/payload.c/document/document.tpl убрать строчки 
			'MODULE_AUTHOR(...)',
			'MODULE_LISENCE(...)',
			'module_init(..)',
			'module_exit(...)';
		функция инициализации модуля должна иметь объявление 
			int __init payload_init(void)
		финализации модуля:
			void payload_cleanup(void)
		(без 'static'!)
		
		проверить, что параметр <$module.name$> нигде не используется в коде

	-в исходном templates/trace_payload.h/document/document.tpl заменить
			'#define TRACE_SYSTEM <$module.name$>' на
			'#define TRACE_SYSTEM kedr_hot'