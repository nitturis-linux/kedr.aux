Пример для демонстрации инструментирования уже загруженного и работающего
модуля ("hot patching")
=======================================================================

Драйвер "hp_patcher" в процессе своей загрузки инструментирует целевой 
драйвер (тот к этому времени должен быть в памяти), а затем выводит в 
системный лог данные о перехваченных вызовах функций.

Загрузка "hp_patcher" с указанием "прослушивать" драйвер "cr_target":
/sbin/insmod hp_patcher.ko target_name="cr_target".

"hp_patcher" можно выгрузить и во время работы target драйвера, при этом 
код последнего будет приведён в исходное состояние (т.е. 
"деинструментирован").

Если target module выгрузить, потом лучше выгрузить и "hp_patcher": всё 
равно на загрузку target module тот не реагирует.

В качестве target module можно использовать "cr_target" из примеров 
"call_repl*" или любой другой модуль, доступный в системе (в частности, 
пример проверялся и для модуля "ext4", и для "vbox*", и для "snd" и пр.)
=======================================================================

Работает только на x86 и x86_64. 

Должно работать корректно и на однопроцессорных системах без 
HyperThreading, и на SMP-системах тоже.

Вряд ли скомпилируется на ядрах старше 2.6.28.

Не рекомендуется использовать "hp_patcher" для драйверов, в которых уже
стоят kernel probe на инструкциях call для соотв. функций. Небезопасно.
=======================================================================

Механизм "подключения" к target-модулю в общих чертах таков. 
Используются KProbe (kernel probes). Именно они позволяют безопасно 
подключаться к target-модулю и отключаться от него в том числе на 
SMP-системах (в kprobe это предусмотрено).

Из документации по kprobe:
---------------------
1.1 How Does a Kprobe Work?

When a kprobe is registered, Kprobes makes a copy of the probed
instruction and replaces the first byte(s) of the probed instruction
with a breakpoint instruction (e.g., int3 on i386 and x86_64).

When a CPU hits the breakpoint instruction, a trap occurs, the CPU's
registers are saved, and control passes to Kprobes via the
notifier_call_chain mechanism.  Kprobes executes the "pre_handler"
associated with the kprobe, passing the handler the addresses of the
kprobe struct and the saved registers.

Next, Kprobes single-steps its copy of the probed instruction.
(It would be simpler to single-step the actual instruction in place,
but then Kprobes would have to temporarily remove the breakpoint
instruction.  This would open a small time window when another CPU
could sail right past the probepoint.)

After the instruction is single-stepped, Kprobes executes the
"post_handler," if any, that is associated with the kprobe.
Execution then continues with the instruction following the probepoint.
---------------------

"hp_patcher" действует так. 

На каждую инструкцию вызова интересующей нас функции в target module 
ставится kprobe (для этого декодируются инструкции из секций кода 
драйвера - так же, как и делает controller в примерах 
"controller_payload"). 

В struct kprobe (после вызова register_kprobe) хранится копия инструкции, 
на которую поставлена эта kprobe (точнее, на x86/x86-64 - указатель на 
нее). Выполняется ИМЕННО ЭТА КОПИЯ, а не оригинальная инструкция в памяти. 

[NB] Система kprobes сама разбирается с тем, чтобы эта копия была в области 
памяти, для которой разрешено исполнение кода.

В памяти самого драйвера так и остаётся исходная инструкция с <breakpoint> 
или jmp в первых байтах. Т.е. даже если кто-то на других процессорах и т.п. 
попробует выполнить эту инструкцию, будет breakpoint trap и пока система 
kprobes не обработает эту ситуацию, дальше выполнение не пойдёт.

[NB] Похоже, что система kprobes обрабатывает такие ситуации не обязательно 
строго последовательно (reentrance может быть). 

[NB] Саму память target module "hp_patcher" напрямую не меняет, только 
копию инструкции, сохранённую в struct kprobe.

В pre-handler'е для kprobe hp_patcher проверяет, обрабатывал ли он уже эту 
kprobe, если да - ничего не делает, если нет - подменяет адрес вызова в 
инструкции, сохранённой в struct kprobe.

[NB] Все изменения (в т.ч. и восстановление исходных значений - см. ниже) в 
struct kprobe делается под защитой spinlock: нельзя допускать 
одновременного выполнения этого фрагмента кода несколькими потоками.

После этого система kprobes сама будет каждый раз выполнять нужную нам 
инструкцию, т.е. вызывать нужную replacement функцию.

При деинструментировании производится обратный процесс: в struct kprobe 
записывается снова исходный вариант инструкции call. Затем делается 
unregister_kprobe - и система kprobe восстанавливает соотв. инструкции в 
памяти target module сама.

[NB] Как на установку kprobe влияет "__kprobe" qualifier для функций - пока 
неясно. Предполагалось, что в такие функции kprobe ставить не получится, но 
на практике оказалось, что можно и что они работают, как обычно. По адресам 
ELF-секций и соотв. функций можно проверить, что эти функции - 
действительно, в ".kprobe.text", т.е. в отдельной секции. Никаких других 
отличий от обычных функций пока не выявлено.

[NB] Текущая реализация "hp_patcher" использует недокументированные 
особенности kprobes: 
- то, что указатель на копию исходной инструкции хранится в таком-то поле в 
struct kprobe и что к этому полю есть доступ;
- то, что для инструкции 'call' эта копия хранится без fixup для 
смещения(т.е., что это именно копия);
- то, что struct kprobe можно хранить как поле в своей структуре и 
использовать в handler'е container_of() для получения адреса экземпляра 
этой структуры (этим, правда, в самой системе kprobes активно пользуются)
- и т.д.

Т.е., не факт, что это всё заработает в след. версиях ядра - проверять надо.
=======================================================================

Пример "Hot Patching" проверялся на след. системах (в скобках - 
версии ядра):

1.  OpenSUSE 11.2 x86 (2.6.31) - OK
2.  OpenSUSE 11.3M4 x86 2xCPU (2.6.33) - OK
3.  Fedora 12 x64 (2.6.31) - OK
4.  Ubuntu 10.04 x64 (2.6.32) - OK
5.  Mandriva Cooker (2010.1) x86 (2.6.31) - OK
6.  OpenSUSE 11.2 x64 (2.6.31) - OK
7.  Fedora 13 x64 (2.6.33) - OK
8.  Ubuntu 10.04 x86 (2.6.32) - OK
