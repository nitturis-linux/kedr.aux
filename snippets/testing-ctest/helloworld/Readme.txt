Пример, демонстрирующий, как можно организовать систему тестов для пакета 
на основе CMake/CTest
-------------------------------------------------------------------------

${CMAKE_SOURCE_DIR}/tests/ - тесты, "глобальные" для пакета. Некоторые тесты 
неудобно хранить вместе с каким-л. компонентом пакета. Такие тесты можно 
разместить в ${CMAKE_SOURCE_DIR}/tests. Такие тесты, как правило, проверяют 
несколько компонентов пакета.

${CMAKE_SOURCE_DIR}/<component>/tests/ - тесты, "локальные" для данного 
компонента. Такие тесты предназначены для проверки данного компонента. Сами 
эти тесты при работе могут использовать и другие компоненты пакета.

Запуск всех тестов:
    make check 

Делается это в корневом каталоге пакета. При make check будет вначале собрано 
всё необходимое для тестов, затем будут выполнены сами тесты.

Если нужно только собрать всё необходимое для тестов, но пока не запускать
тесты, стоит вызвать 
    make build_tests

Если всё необходимое для тестов уже собрано, можно для запуска тестов просто 
вызвать 
    make test
    
или ещё проще:
    ctest

Вывод списка имён тестов:
    ctest -N

Запуск только тестов, у которых в имени есть подстрока "sample":
    ctest -R sample

Запуск только тестов, у которых в имени нет подстроки "sample":
    ctest -E sample

Вместо подстроки можно использовать и регулярные выражения (см. документацию
по CTest).

Логи тестов:
find Testing -name '*.log'

LastTest.log - лог выполнения тестов, без указания вердикта (трасса, скорее).
LastTestsFailed.log - список failed тестов.
========================================================================

Имена тестов

Тестам предполагается давать имена след. вида:

<namespace>[.<group>].<id>

Для "глобальных" тестов <namespace> - имя пакета. Для "локальных" - имя соотв.
компонента.

<id> - номер или какой-то иной идентификатор теста.

<group> может быть полезно указывать, если набор тестов для данного компонента
состоит из нескольких частей, и хочется эти чести разграничить.
Например, если часть тестов проверяют API, предоставляемый компонентом 
controller, а часть - собственно перехват функций, имена у тестов м.б. такие:
    controller.api.testA, controller.api.testB, ...
    controller.repl.testA, controller.repl.testB, ...
    
[NB] Ни одно из имён тестов не должно быть подстрокой никакого другого
(это бы затруднило реализацию поддержки "may fail"-тестов).

Т.е. нельзя использовать "kedr.custom.1" и "kedr.custom.11", 
но можно - "kedr.custom.01" и "kedr.custom.11".
========================================================================

Convenience API для использования в CMakeLists.txt
---------------------

kedr_test_init ()

kedr_test_init () нужно вызвать в top-level CMakeLists.txt до 
"add_subdirectories (...) - этот вызов включит поддержку тестирования, 
создаст необходимые глобальные targets ('check', 'build_test') и пр.
---------------------

kedr_test_add_script (<test_name> <script_file> [parameters])

kedr_test_add_script создаёт тест с указанным именем, в котором будет 
выполняться указанный Bash script (с перечисленными параметрами, если есть). 
Script может располагаться в текущей source или binary directory (в source
он ищется в первую очередь).

[NB] Если нужно изменить какие-то properties данного теста, можно использовать
set_test_properties для данного имени теста, как обычно.
---------------------

kedr_test_add_target (<target_name>)

Если перед выполнением тестов необходимо собрать какой-то target (например,
собрать приложение, необходимое только для выполнения тестов, но не для 
'make all'), kedr_test_add_target() - как раз для этого.

[NB] Стоит ещё раз отметить, для данного target property EXCLUDE_FROM_ALL
kedr_test_add_target выставит в true, т.е. при 'make' ('make all') этот 
target собираться не будет.
---------------------
