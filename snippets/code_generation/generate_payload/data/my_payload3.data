# This module processes the calls for locking and unlocking semaphores
# (down*(), up()).

module.name = my_payload3
module.author = Me, me and me again
module.license = GPL

header =>>
#include <linux/kernel.h>   /* printk() */
#include <linux/slab.h>     /* kmalloc() */
#include <linux/errno.h>    /* error codes */
#include <linux/semaphore.h>	/* down_* & up */

#include <cp_controller/controller_common.h>
<<

# Each group corresponds to a target function.
# 
# Give 'returnsVoid' a non-empty value if the target function returns void.
# Otherwise, it is not necessary to define 'returnsVoid' at all.
# If the function returns void, 'returnType' will be ignored.

#######################################################################
[group]
	# Name and return type of the target function
	function.name = down
	returnsVoid = yes

	# Names and types of the arguments of the target function
	arg.type = struct semaphore *
	arg.name = sem
	
	# The parameters to be output to the trace. 
	trace.param.type = const void*
	trace.param.name = sem

	# The format string to be used for trace output.
	# The order in which parameters will be listed in the call to
	# a tracing function is the same as the corresponding trace.param.* 
	# definitions are listed in this file.
	trace.formatString = "arguments: (%p)"

# End of the group of definitions for down().

#######################################################################
[group]
	# Name and return type of the target function
	function.name = down_interruptible
	returnType = int

	# Names and types of the arguments of the target function
	arg.type = struct semaphore *
	arg.name = sem
	
	# The parameters to be output to the trace. 
	trace.param.type = const void*
	trace.param.name = sem
	
	trace.param.type = int
	trace.param.name = returnValue

	# The format string to be used for trace output.
	# The order in which parameters will be listed in the call to
	# a tracing function is the same as the corresponding trace.param.* 
	# definitions are listed in this file.
	trace.formatString = "arguments: (%p), result: %d"

# End of the group of definitions for down_interruptible().

#######################################################################
[group]
	# Name and return type of the target function
	function.name = down_killable
	returnType = int

	# Names and types of the arguments of the target function
	arg.type = struct semaphore *
	arg.name = sem
	
	# The parameters to be output to the trace. 
	trace.param.type = const void*
	trace.param.name = sem
	
	trace.param.type = int
	trace.param.name = returnValue

	# The format string to be used for trace output.
	# The order in which parameters will be listed in the call to
	# a tracing function is the same as the corresponding trace.param.* 
	# definitions are listed in this file.
	trace.formatString = "arguments: (%p), result: %d"

# End of the group of definitions for down_killable().

#######################################################################
[group]
	# Name and return type of the target function
	function.name = down_trylock
	returnType = int

	# Names and types of the arguments of the target function
	arg.type = struct semaphore *
	arg.name = sem
	
	# The parameters to be output to the trace. 
	trace.param.type = const void*
	trace.param.name = sem
	
	trace.param.type = int
	trace.param.name = returnValue

	# The format string to be used for trace output.
	# The order in which parameters will be listed in the call to
	# a tracing function is the same as the corresponding trace.param.* 
	# definitions are listed in this file.
	trace.formatString = "arguments: (%p), result: %d"

# End of the group of definitions for down_trylock().

#######################################################################
[group]
	# Name and return type of the target function
	function.name = down_timeout
	returnType = int

	# Names and types of the arguments of the target function
	arg.type = struct semaphore *
	arg.name = sem
	
	arg.type = long
	arg.name = jiffies_count
	
	# The parameters to be output to the trace. 
	trace.param.type = const void*
	trace.param.name = sem
	
	trace.param.type = long
	trace.param.name = jiffies_count
	
	trace.param.type = int
	trace.param.name = returnValue

	# The format string to be used for trace output.
	# The order in which parameters will be listed in the call to
	# a tracing function is the same as the corresponding trace.param.* 
	# definitions are listed in this file.
	trace.formatString = "arguments: (%p, %ld), result: %d"

# End of the group of definitions for down_timeout().

#######################################################################
[group]
	# Name and return type of the target function
	function.name = up
	returnsVoid = yes

	# Names and types of the arguments of the target function
	arg.type = struct semaphore *
	arg.name = sem
	
	# The parameters to be output to the trace. 
	trace.param.type = const void*
	trace.param.name = sem

	# The format string to be used for trace output.
	# The order in which parameters will be listed in the call to
	# a tracing function is the same as the corresponding trace.param.* 
	# definitions are listed in this file.
	trace.formatString = "arguments: (%p)"

# End of the group of definitions for up().
#######################################################################
