# This module processes the calls to memory allocation and deallocation 
# functions.

module.name = my_payload1
module.author = Me, me and me again
module.license = GPL

header =>>
#include <linux/kernel.h>   /* printk() */
#include <linux/slab.h>     /* kmalloc() */
#include <linux/errno.h>    /* error codes */

#include <linux/interrupt.h> /* in_atomic(), in_interrupt() */

#include <cp_controller/controller_common.h>
<<

# Each group corresponds to a target function.
# 
# Give 'returnsVoid' a non-empty value if the target function returns void.
# Otherwise, it is not necessary to define 'returnsVoid' at all.
# If the function returns void, 'returnType' will be ignored.

#######################################################################
[group]
	# Name and return type of the target function
	function.name = __kmalloc
	returnType = void*

	# Names and types of the arguments of the target function
	arg.type = size_t
	arg.name = size

	arg.type = gfp_t
	arg.name = flags
	
	# The parameters to be output to the trace. 
	# [NB] If you would like to output the return value of the function 
	# as well, you should specify it explicitly by defining 
	# 'trace.param.name' as 'returnValue' (reserved name) and the same 
	# (or compatible) type as in 'returnType'.
	trace.param.type = size_t
	trace.param.name = size

	# Note that the names and the types of trace parameters may differ 
	# from those of the arguments of the target function.
	# See 'unsigned int' here instead of 'gfp_t'
	trace.param.type = unsigned int
	trace.param.name = flags

	trace.param.type = void*
	trace.param.name = returnValue

	trace.param.type = int
	trace.param.name = inInit
	
	trace.param.type = int
	trace.param.name = inAtomicContext
	
	trace.param.type = int
	trace.param.name = inInterruptContext
	
	# The format string to be used for trace output.
	# The order in which parameters will be listed in the call to
	# a tracing function is the same as the corresponding trace.param.* 
	# definitions are listed in this file.
	#
	# [NB] The name of the target function will be recorded in the trace
	# for the corresponding event anyway as it is in the name of 
	# the event ("called_<target_function_name>").
	trace.formatString = \
 "arguments: (%zu, %x), result: %p, in init: %d, in atomic: %d, in intr: %d"

	prologue =>>
	int inInit;
	int inAtomicContext;
	int inInterruptContext;
	
	inInit = kedr_target_module_in_init();
	inAtomicContext = in_atomic();
	inInterruptContext = in_interrupt();
	<<
# End of the group of definitions for __kmalloc().

#######################################################################
[group]
	# Name and return type of the target function
	function.name = kfree
	returnsVoid = yes
	# No need to specify 'returnType' in this case

	# Names and types of the arguments of the target function
	arg.type = void*
	arg.name = p
	
	# The parameters to be output to the trace. 
	trace.param.type = void*
	trace.param.name = p

	# The format string to be used for trace output.
	# The order in which parameters will be listed in the call to
	# a tracing function is the same as the corresponding trace.param.* 
	# definitions are listed in this file.
	trace.formatString = "arguments: (%p)"
# End of the group of definitions for kfree().

#######################################################################
[group]
	# Name and return type of the target function
	function.name = kmem_cache_alloc
	returnType = void*

	# Names and types of the arguments of the target function
	arg.type = struct kmem_cache*
	arg.name = mc
	
	arg.type = gfp_t
	arg.name = flags
	
	# The parameters to be output to the trace. 
	trace.param.type = void*
	trace.param.name = mc

	trace.param.type = unsigned int
	trace.param.name = flags
	
	trace.param.type = void*
	trace.param.name = returnValue

	trace.param.type = int
	trace.param.name = inInit
	
	trace.param.type = int
	trace.param.name = inAtomicContext
	
	trace.param.type = int
	trace.param.name = inInterruptContext
	
	# The format string to be used for trace output.
	# The order in which parameters will be listed in the call to
	# a tracing function is the same as the corresponding trace.param.* 
	# definitions are listed in this file.
	trace.formatString = \
 "arguments: (%p, %x), result: %p, in init: %d, in atomic: %d, in intr: %d"

	prologue =>>
	int inInit;
	int inAtomicContext;
	int inInterruptContext;
	
	inInit = kedr_target_module_in_init();
	inAtomicContext = in_atomic();
	inInterruptContext = in_interrupt();
	<<
# End of the group of definitions for kmem_cache_alloc().

#######################################################################
[group]
	# Name and return type of the target function
	function.name = kmem_cache_free
	returnsVoid = yes

	# Names and types of the arguments of the target function
	arg.type = struct kmem_cache*
	arg.name = mc
	
	arg.type = void*
	arg.name = p
	
	# The parameters to be output to the trace. 
	trace.param.type = void*
	trace.param.name = mc
	
	trace.param.type = void*
	trace.param.name = p

	# The format string to be used for trace output.
	# The order in which parameters will be listed in the call to
	# a tracing function is the same as the corresponding trace.param.* 
	# definitions are listed in this file.
	trace.formatString = "arguments: (%p, %p)"
	
	# If we do not need a parameter (e.g. "prologue", etc.), we do not
	# need to define it here at all.
# End of the group of definitions for kmem_cache_free().
#######################################################################
