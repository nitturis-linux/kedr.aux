# This module processes the calls to memory allocation and deallocation 
# functions.

module.name = payload_fsim_kmalloc
module.author = Tsyvarev
module.license = GPL

header =>>
/* ========================================================================
 * Copyright (C) 2010, Institute for System Programming 
 *                     of the Russian Academy of Sciences (ISPRAS)
 * Authors: 
 *      Eugene A. Shatokhin <spectre@ispras.ru>
 *      Andrey V. Tsyvarev  <tsyvarev@ispras.ru>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 ======================================================================== */

#include <linux/slab.h>     /* kmalloc() */
<<
[group]
	# Name and return type of the target function
	function.name = __kmalloc
	returnType = void*

	# Names and types of the arguments of the target function
	arg.type = size_t
	arg.name = size

	arg.type = gfp_t
	arg.name = flags
	
	prologue =>>
void* caller_address = __builtin_return_address(0);
<<
	
	# The parameters to be output to the trace. 
	trace.param.type = size_t
	trace.param.name = size

	trace.param.type = unsigned int
	trace.param.name = flags

	trace.param.type = void*
	trace.param.name = returnValue

	# The format string to be used for trace output.
	trace.formatString = "arguments: (%zu, %x), result: %p"

	# Fault Simulation
	fpoint.param.type = size_t
	fpoint.param.name = size

	fpoint.param.type = gfp_t
	fpoint.param.name = flags
	
	fpoint.param.type = void*
	fpoint.param.name = caller_address

	fpoint.fault_code =	returnValue = NULL;

# End of the group of definitions for __kmalloc().

#######################################################################
[group]
	# Name and return type of the target function
	function.name = krealloc
	returnType = void*

	# Names and types of the arguments of the target function
	arg.type = const void*
	arg.name = p

	arg.type = size_t
	arg.name = size

	arg.type = gfp_t
	arg.name = flags
	
	prologue =>>
void* caller_address = __builtin_return_address(0);
<<
	
	# The parameters to be output to the trace. 
	trace.param.type = const void*
	trace.param.name = p

	trace.param.type = size_t
	trace.param.name = size

	trace.param.type = unsigned int
	trace.param.name = flags

	trace.param.type = void*
	trace.param.name = returnValue

	# The format string to be used for trace output.
	trace.formatString = "arguments: (%p, %zu, %x), result: %p"
	
	# Fault Simulation
	fpoint.reuse_point = __kmalloc

	fpoint.param.type = size_t
	fpoint.param.name = size

	fpoint.param.type = gfp_t
	fpoint.param.name = flags
	
	fpoint.param.type = void*
	fpoint.param.name = caller_address

	fpoint.fault_code =	returnValue = NULL;

# End of the group of definitions for krealloc().

#######################################################################
[group]
	# Name and return type of the target function
	function.name = kmem_cache_alloc
	returnType = void*

	# Names and types of the arguments of the target function
	arg.type = struct kmem_cache*
	arg.name = mc
	
	arg.type = gfp_t
	arg.name = flags
	
	prologue =>>
void* caller_address = __builtin_return_address(0);
size_t size = kmem_cache_size(mc);
<<
	# The parameters to be output to the trace. 
	trace.param.type = void*
	trace.param.name = mc

	trace.param.type = unsigned int
	trace.param.name = flags

	trace.param.type = void*
	trace.param.name = returnValue

	# The format string to be used for trace output.
	trace.formatString = "arguments: (%p, %x), result: %p"

	# Fault Simulation
	fpoint.reuse_point = __kmalloc

	# Duplicate parameters for kmalloc simulation point
	fpoint.param.type = size_t
	fpoint.param.name = size

	fpoint.param.type = gfp_t
	fpoint.param.name = flags
	
	fpoint.param.type = void*
	fpoint.param.name = caller_address

	fpoint.fault_code =	returnValue = NULL;

# End of the group of definitions for kmem_cache_alloc().

#######################################################################
[group]
	# Name and return type of the target function
	function.name = kmem_cache_alloc_notrace
	returnType = void*

	# Names and types of the arguments of the target function
	arg.type = struct kmem_cache*
	arg.name = mc
	
	arg.type = gfp_t
	arg.name = flags
	
	prologue =>>
void* caller_address = __builtin_return_address(0);
size_t size = kmem_cache_size(mc);
<<
	# The parameters to be output to the trace. 
	trace.param.type = void*
	trace.param.name = mc

	trace.param.type = unsigned int
	trace.param.name = flags

	trace.param.type = void*
	trace.param.name = returnValue

	# The format string to be used for trace output.
	trace.formatString = "arguments: (%p, %x), result: %p"

	# Fault Simulation
	fpoint.reuse_point = __kmalloc

	# Duplicate parameters for kmalloc simulation point
	fpoint.param.type = size_t
	fpoint.param.name = size

	fpoint.param.type = gfp_t
	fpoint.param.name = flags
	
	fpoint.param.type = void*
	fpoint.param.name = caller_address

	fpoint.fault_code =	returnValue = NULL;

# End of the group of definitions for kmem_cache_alloc_notrace().

#######################################################################
[group]
	# Name and return type of the target function
	function.name = __get_free_pages
	returnType = unsigned long

	# Names and types of the arguments of the target function
	arg.type = gfp_t
	arg.name = flags
	
	arg.type = unsigned int
	arg.name = order

	prologue =>>
void* caller_address = __builtin_return_address(0);
size_t size = PAGE_SIZE * (((size_t)1) >> order);
<<
	# The parameters to be output to the trace. 
	trace.param.type = unsigned int
	trace.param.name = flags

	trace.param.type = unsigned int
	trace.param.name = order

	trace.param.type = void*
	trace.param.name = returnValue

	# The format string to be used for trace output.
	trace.formatString = "arguments: (%x, %u), result: %p"

	# Fault Simulation
	fpoint.reuse_point = __kmalloc

	# Duplicate parameters for kmalloc simulation point
	fpoint.param.type = size_t
	fpoint.param.name = size

	fpoint.param.type = gfp_t
	fpoint.param.name = flags
	
	fpoint.param.type = void*
	fpoint.param.name = caller_address

	fpoint.fault_code =	returnValue = 0;

# End of the group of definitions for __get_free_pages().

#######################################################################
[group]
	# Name and return type of the target function
	function.name = kmem_cache_free

	# Names and types of the arguments of the target function
	arg.type = struct kmem_cache*
	arg.name = mc
	
	arg.type = void*
	arg.name = p
	
	# The parameters to be output to the trace. 
	trace.param.type = void*
	trace.param.name = mc
	
	trace.param.type = void*
	trace.param.name = p

	# The format string to be used for trace output.
	trace.formatString = "arguments: (%p, %p)"

# End of the group of definitions for kmem_cache_free().
#######################################################################
[group]
	# Name and return type of the target function
	function.name = kfree

	# Names and types of the arguments of the target function
	arg.type = void*
	arg.name = p
	
	# The parameters to be output to the trace. 
	trace.param.type = void*
	trace.param.name = p

	# Happens-before relationship with kmalloc
	trace.happensBefore = yes

	# The format string to be used for trace output.
	trace.formatString = "arguments: (%p)"

# End of the group of definitions for kfree().

#######################################################################
[group]
	# Name and return type of the target function
	function.name = free_pages

	# Names and types of the arguments of the target function
	arg.type = unsigned long
	arg.name = addr
	
	arg.type = unsigned int
	arg.name = order

	# The parameters to be output to the trace. 
	trace.param.type = void*
	trace.param.name = addr

	trace.param.type = unsigned int
	trace.param.name = order

	# Happens-before relationship with __get_free_pages
	trace.happensBefore = yes

	# The format string to be used for trace output.
	trace.formatString = "arguments: (%p, %u)"

# End of the group of definitions for free_pages().

#######################################################################

